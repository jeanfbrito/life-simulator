<context>
# Overview
Life Simulator is a headless wildlife ecosystem simulation built with Bevy 0.16, featuring a separated architecture where world generation is completely independent from the running simulation engine. The project implements a tick-based discrete simulation system inspired by classic roguelikes (Dwarf Fortress, NetHack) with professional visualization through a native Godot-powered isometric viewer.

The simulator enables complex predator-prey dynamics, foraging behavior, reproduction, and survival mechanics in a realistic temperate woodland-grassland ecosystem. Maps are generated with sophisticated biome systems, river networks, and vegetation patterns, ensuring reproducible worlds that can be saved, shared, and version controlled.

**Target Users:**
- Wildlife ecology researchers and students
- Game developers learning ecosystem simulation
- AI researchers experimenting with emergent behavior
- Nature enthusiasts interested in predator-prey dynamics

**Core Value Proposition:**
- Scientifically-inspired wildlife ecosystem with realistic biomes
- Beautiful isometric visualization with hardware-accelerated rendering
- Pure discrete simulation with deterministic outcomes
- Modular behavior system supporting complete food chains (herbivore → omnivore → carnivore)
- Advanced map generation with rivers, biomes, and natural terrain

# Core Features

## 1. Separated World Generation & Simulation
**What it does:** Complete separation between world generation (CLI tool) and runtime simulation (Bevy ECS), with worlds saved as RON files featuring sophisticated biome generation, river networks, and vegetation placement.

**Why it's important:** Enables reproducible ecosystems, world versioning, scientific repeatability, and ensures consistent environments for balanced wildlife populations.

**How it works:**
- `map_generator` binary creates realistic worlds with multiple biomes
- Advanced terrain generation: woodlands, grasslands, forest edges, rivers
- Vegetation placement: trees, bushes, grass, flowers matched to biomes
- Resource distribution aligned with ecological principles
- Worlds saved to `maps/` directory as RON files
- `life-simulator` loads pre-generated worlds via WorldLoader
- CachedWorld provides global thread-safe access for visualization

## 2. Tick-Based Discrete Simulation
**What it does:** Fixed timestep simulation at 10 TPS (ticks per second) with multi-rate update system optimized for ecological timescales.

**Why it's important:** Ensures deterministic, reproducible simulation behavior. Allows different systems (predation, foraging, reproduction, plant growth) to run at biologically appropriate frequencies.

**How it works:**
- Base rate: 10 TPS (100ms per tick)
- Fast systems run every tick (movement, hunting, fleeing)
- Medium systems run every 5-10 ticks (AI decisions, needs updates)
- Slow systems run every 100+ ticks (reproduction, plant growth, aging)
- Very slow systems run every 1000+ ticks (seasonal changes, population dynamics)
- Pause/speed controls with multipliers (0.5x to 3.0x)

## 3. Complete Food Chain with AI-Driven Behavior
**What it does:** Six animal species with modular behavior profiles representing a complete temperate woodland ecosystem:
- **Herbivores:** Rabbits (small prey, fast breeding), Deer (large grazers)
- **Omnivores:** Raccoons (opportunistic scavengers), Bears (powerful, territorial)
- **Carnivores:** Foxes (solo hunters), Wolves (pack hunters, apex predators)

**Why it's important:** Creates realistic predator-prey dynamics, energy flow through trophic levels, and emergent population regulation. Each species fills a specific ecological niche.

**How it works:**
- BehaviorConfig component defines species-specific thresholds (thirst, hunger, fear)
- SpeciesNeeds profiles for each animal type
- Utility-based AI selects actions: forage, hunt, flee, drink, mate, rest
- Actions trigger pathfinding to resources or prey
- Reproduction system with cooldowns, gestation, and offspring
- Fear system: herbivores flee from predators, creating realistic chase dynamics

## 4. Pathfinding & Movement with Terrain Awareness
**What it does:** A* pathfinding with biome-aware cost system and discrete tile-by-tile movement execution. Animals navigate intelligently through forests, meadows, and rivers.

**Why it's important:** Enables realistic navigation where animals prefer their natural habitat (deer in meadows, wolves in forests) and avoid unsuitable terrain.

**How it works:**
- PathfindingGrid built from terrain movement costs
- Biome-specific costs: Grass (easy), Forest (harder), Water (swimming), Mountains (impassable)
- Async pathfinding calculation (60fps) with tick-synced execution
- Diagonal movement support for natural-looking paths
- Movement speed varies by species (wolves fast, bears slow)
- Predators calculate chase paths, prey calculates escape paths

## 5. Professional Godot Viewer (Primary Visualization)
**What it does:** Native desktop application with hardware-accelerated isometric rendering, providing beautiful real-time visualization of the ecosystem with advanced camera controls and statistical overlays.

**Why it's important:** Godot viewer offers 100x better performance than web-based rendering, enabling smooth visualization of large populations and complex environments. Professional-grade visuals make the simulation engaging and scientifically useful.

**How it works:**
- Native Godot 4.3+ application with GDScript
- Isometric TileMap rendering with 128×64 pixel diamond tiles
- Dynamic terrain coloring based on biomes
- Resource rendering (trees 🌲, bushes 🌿, flowers 🌸) with Y-sorting
- Animal sprites with species emojis, scaling, and behavior labels
- Advanced camera: pan, zoom (0.2x-5.0x), edge scrolling, WASD movement
- Real-time statistics HUD: population counts, births/deaths, FPS metrics
- Toggle-able overlays: controls help, statistics panel
- Connects to backend via HTTP API (port 54321)

## 6. Advanced Biome-Based World Generation
**What it does:** Sophisticated procedural world generation creating realistic temperate ecosystems with multiple biomes, river networks, elevation variation, and ecologically-appropriate vegetation placement.

**Why it's important:** Creates diverse, interesting environments that support balanced wildlife populations. Different biomes provide different resources and habitats, creating natural territories and migration patterns.

**How it works:**
- **Biome System:**
  - **Temperate Deciduous Forest:** Dense tree coverage, shade, cover for predators
  - **Woodland:** Scattered trees with clearings, mixed habitat
  - **Grassland/Meadow:** Open grass, ideal for grazers, vulnerable for prey
  - **Forest Edge/Ecotone:** Transition zones, highest biodiversity
  - **Riparian Zones:** River banks, critical water access, lush vegetation
  - **Rocky Outcrops:** Den sites for foxes and wolves

- **River Generation:**
  - Source points at higher elevations
  - Flow toward lower elevations (pathfinding-based flow)
  - Tributaries and branching patterns
  - Varying widths (streams to rivers)
  - Shallow water near banks, deep water in center

- **Vegetation Placement:**
  - Biome-appropriate flora density
  - Trees clustered in forests, scattered in woodlands
  - Bushes along forest edges and clearings
  - Grass covering meadows and woodland clearings
  - Flowers in meadows and sunny areas
  - Riparian vegetation along water sources

- **Elevation System:**
  - Gradual elevation changes creating hills and valleys
  - Rivers follow natural drainage patterns
  - Mountain ranges creating watershed divides
  - Influence on biome placement (elevation + moisture)

# User Experience

## Developer/Researcher Personas

### Persona 1: "The Wildlife Ecologist"
**Goals:** Study predator-prey dynamics, validate ecological theories, observe emergent population regulation
**Pain Points:** Need reproducible results, want realistic animal behavior, require data export
**Use Cases:**
- Set up balanced ecosystems with specific predator/prey ratios
- Observe population oscillations (Lotka-Volterra dynamics)
- Track resource availability and animal survival rates
- Export statistics for analysis
- Test different world configurations (more/less water, varied biomes)

### Persona 2: "The Game Developer"
**Goals:** Learn ecosystem simulation patterns, understand AI behavior systems, study procedural generation
**Pain Points:** Want clean code examples, need extensible architecture, require good documentation
**Use Cases:**
- Study tick-based simulation architecture
- Learn utility-based AI implementation
- Understand pathfinding with ecological considerations
- Extend with new animal species
- Create custom biomes and terrain types

### Persona 3: "The Nature Enthusiast"
**Goals:** Create beautiful natural worlds, watch realistic animal behavior, share interesting ecosystems
**Pain Points:** Want easy-to-use tools, need engaging visualization, desire shareable content
**Use Cases:**
- Generate diverse worlds with different biomes
- Observe predator hunts and prey escapes
- Watch seasonal cycles and population changes
- Take screenshots and videos
- Share world seeds with others

## Key User Flows

### Flow 1: First-Time Setup & Wildlife Observation
1. Clone repository and run `cargo build`
2. Generate diverse world: `cargo run --bin map_generator -- --name "woodland" --seed 42 --radius 10`
3. Start simulator: `cargo run --bin life-simulator`
4. Launch Godot viewer: `cd godot-viewer && /Applications/Godot.app/Contents/MacOS/Godot --path .`
5. Press F5 to run viewer
6. Observe ecosystem: rabbits grazing in meadows, deer at forest edges, wolves hunting
7. Watch statistics: population counts, births, predation events
8. Use camera controls to follow interesting interactions

### Flow 2: Ecosystem Balancing Experiment
1. Generate world with specific seed
2. Load world and observe default population dynamics
3. Modify spawn counts in `src/main.rs` (more/fewer predators)
4. Restart simulation and observe different population curves
5. Track survival rates in statistics HUD
6. Iterate to find balanced ratios
7. Document findings and successful configurations

### Flow 3: Biome Exploration
1. Generate large world: `cargo run --bin map_generator -- --radius 15`
2. Start simulator and Godot viewer
3. Use camera to explore different biomes
4. Observe animals in their preferred habitats:
   - Deer grazing in meadows
   - Wolves traveling through forests
   - Rabbits near forest edges (cover + food)
   - Bears roaming between biomes (omnivore)
   - Raccoons near water sources
   - Foxes hunting in mixed terrain
5. Notice animals traveling to water sources (rivers, ponds)
6. Watch territorial behavior and migration patterns

## UI/UX Considerations

### Godot Viewer (Primary Interface)
- **Professional Game Aesthetic:** Beautiful isometric rendering feels like a polished game
- **Intuitive Controls:** Multiple input methods (mouse, keyboard, edge scrolling)
- **Non-Intrusive Overlays:** Statistics visible but not cluttering the view
- **Smooth Performance:** 60 FPS with hundreds of entities
- **Color-Coded Biomes:** Easy visual distinction between terrain types
- **Clear Entity Identification:** Emoji sprites + species labels on hover
- **Real-Time Feedback:** See births, deaths, hunts as they happen

### Web Viewer (Legacy/Deprecated)
- **Status:** Kept for reference only, not actively developed
- **Use Case:** Quick debugging when Godot not available
- **Limitations:** Lower performance, basic orthogonal view, no advanced features
- **Recommendation:** Use Godot viewer for all development and visualization
</context>

<PRD>
# Technical Architecture

## System Components

### 1. Map Generator (Binary) - PRIORITY TRACK
**Component:** `src/map_generator.rs`
**Purpose:** Advanced procedural world generation with biome systems, rivers, and vegetation
**Key Systems:**
- BiomeGenerator: Multi-biome placement with ecological rules
- RiverGenerator: Realistic river networks with flow simulation
- ElevationGenerator: Height maps for terrain variation
- VegetationPlacer: Biome-appropriate flora distribution
- ResourceDistributor: Ecological resource placement
**Dependencies:** WorldGenerator, noise libraries, pathfinding (for rivers)
**Output:** RON files in `maps/` directory with rich multi-layer data

### 2. Life Simulator (Binary) - PRIORITY TRACK
**Component:** `src/main.rs`
**Purpose:** Headless Bevy ECS simulation engine for wildlife ecosystem
**Key Plugins:**
- SimulationPlugin (tick system, speed control)
- TilemapPlugin (world management, chunk loading)
- EntitiesPlugin (6 species, movement, stats, reproduction)
- AiPlugin (behavior, actions, utility-based planning)
- EcologyPlugin (predation, foraging, population dynamics)
**Dependencies:** WorldLoader, CachedWorld, PathfindingGrid
**Output:** HTTP API on port 54321, simulation state

### 3. Web Server
**Component:** `src/web_server_simple.rs`
**Purpose:** RESTful API serving world and entity data to viewers
**Endpoints:**
- `/api/world_info` - World metadata and biome info
- `/api/chunks` - Multi-layer chunk data (terrain, resources, elevation)
- `/api/entities` - Live entity positions, states, and actions
- `/api/statistics` - Population counts, births/deaths, ecological metrics
**Threading:** Runs in separate thread from simulation

### 4. Godot Viewer (Primary Visualization) - PRIORITY TRACK
**Location:** `godot-viewer/`
**Purpose:** Professional native desktop visualization with hardware acceleration
**Key Systems:**
- WorldRenderer: Main scene orchestration
- TerrainTileMap: Isometric rendering with dynamic biome colors
- ChunkManager: HTTP client for chunk loading
- WorldDataCache: Client-side caching with invalidation
- CameraController: Multi-input camera system
- ResourceManager: Y-sorted sprite rendering for flora
- EntityManager: Animal display with species emojis and labels
- StatisticsHUD: Real-time population and performance metrics
- Config: Centralized constants and biome color definitions
**Performance:** 60 FPS with 500+ entities, hardware-accelerated OpenGL

### 5. Web Viewer (Legacy/Deprecated)
**Location:** `web-viewer/`
**Status:** No longer actively developed, kept for reference
**Purpose:** Simple browser-based fallback for debugging
**Limitations:** Lower performance, basic features only

## Data Models

### World Data (Enhanced for Biomes)
```rust
SerializedWorld {
  name: String,
  seed: u64,
  config: WorldConfig,
  biome_config: BiomeConfig,  // NEW
  elevation_map: HashMap<String, f32>,  // NEW
  chunks: HashMap<String, SerializedChunk>
}

SerializedChunk {
  x: i32,
  y: i32,
  layers: HashMap<String, Vec<Vec<String>>> {
    "terrain": TerrainType data,
    "resources": Resource data,
    "elevation": Height data,  // NEW
    "biome": BiomeType data,   // NEW
    "vegetation_density": Density data  // NEW
  }
}

BiomeConfig {
  moisture_map: NoiseGenerator,
  temperature_map: NoiseGenerator,
  elevation_influence: f32,
  transition_smoothness: f32,
}
```

### Biome Types
```rust
BiomeType enum: {
  // Temperate woodland-grassland ecosystem
  TemperateForest,      // Dense trees, shade, predator cover
  Woodland,             // Scattered trees, mixed habitat
  Grassland,            // Open meadow, grazing land
  ForestEdge,           // Ecotone, high biodiversity
  RiparianZone,         // River banks, lush vegetation
  RockyOutcrop,         // Den sites, elevation variation

  // Water
  ShallowWater,         // Wadeable streams
  DeepWater,            // Rivers, ponds

  // Future expansion
  WetMeadow,            // Flood plains
  ThicketScrubland,     // Dense bushes
}
```

### Entity Components (Wildlife-Specific)
```rust
// Core identity
Creature { name: String, species: String }
TilePosition { x: i32, y: i32 }

// Ecological markers
Herbivore  // Grazes on vegetation
Omnivore   // Opportunistic feeding
Carnivore  // Hunts other animals

// AI & Behavior
BehaviorConfig {
  thirst_threshold: f32,
  hunger_threshold: f32,
  fear_threshold: f32,     // NEW: When to flee
  hunt_range: i32,         // NEW: Predator hunting distance
  graze_range: (i32, i32),
  water_search_radius: i32,
  food_search_radius: i32,
  wander_radius: i32,
  preferred_biome: BiomeType,  // NEW: Habitat preference
}

SpeciesNeeds {
  thirst_rate: f32,        // How fast thirst increases
  hunger_rate: f32,
  energy_drain_rate: f32,
  base_health: f32,
}

ActionQueue { pending_actions: Vec<Box<dyn Action>> }
FearState { is_fleeing: bool, flee_from: Option<Entity> }  // NEW

// Movement
MovementSpeed { ticks_per_move: u32 }
MovementState { current_ticks: u32 }
Path { waypoints: Vec<IVec2> }

// Stats
Thirst { value: f32 }
Hunger { value: f32 }
Energy { value: f32 }
Health { value: f32, max: f32 }

// Reproduction
Age { current_ticks: u64 }
Sex { Male | Female }
ReproductionCooldown { remaining_ticks: u32 }
Pregnancy { father: Entity, ticks_remaining: u32 }
WellFedStreak { count: u32 }  // Breeding condition
```

### Terrain & Resources
```rust
TerrainType enum: {
  // Grasslands
  Grass, ShortGrass, TallGrass,

  // Forests
  Forest, DenseForest, Woodland,

  // Transitions
  ForestEdge, Meadow,

  // Water
  ShallowWater, DeepWater,

  // Features
  Sand, Dirt, Stone, RockyGround,

  // Elevation
  Hills, Mountains,
}

ResourceType enum: {
  // Vegetation (food for herbivores)
  Grass, Bush, Shrub, Flower,

  // Trees (cover, habitat structure)
  DeciduousTree, ConiferTree, SaplingTree,

  // Features
  Rock, Boulder,

  // Water sources
  WaterSource,  // Ponds, springs
}
```

## APIs and Integrations

### HTTP API (Port 54321)

**Enhanced Endpoints for Ecosystem Visualization:**

1. `GET /api/chunks?center_x=0&center_y=0&radius=3&layers=true`
   - Returns multi-layer chunk data including biome and elevation
   - Supports batching for performance

2. `GET /api/entities`
   - Returns all entities with:
     - Position, species, current action
     - Stats (health, hunger, thirst, energy)
     - Reproduction status (pregnant, cooldown)
     - Fear state (fleeing, from what)

3. `GET /api/statistics`
   - **NEW:** Ecological metrics:
     - Population counts by species
     - Births and deaths (total and per species)
     - Predation events (predator → prey)
     - Average lifespan by species
     - Starvation vs predation death ratios
     - Current tick and uptime

4. `GET /api/biomes`
   - **NEW:** Biome distribution data:
     - Percentage of each biome type
     - River/water coverage
     - Vegetation density by biome
     - Elevation statistics

### Internal Component Communication
- Bevy ECS queries for system communication
- Global `RwLock<Option<CachedWorld>>` for web server access
- Event system for births, deaths, predation
- Statistics aggregator resource

## Infrastructure Requirements

### Development
- Rust 1.70+ (rustup recommended)
- Git for version control
- Godot 4.3+ for native viewer (PRIMARY)
- Modern web browser for legacy web viewer (optional)

### Runtime
- Single binary execution (life-simulator)
- Memory: ~100-300MB for medium worlds with populations
- CPU: 10 TPS tick rate, easily handled by modern CPUs
- GPU: Godot uses OpenGL for hardware-accelerated rendering
- Network: localhost HTTP only (port 54321)

### Storage
- World files: 2-20MB per world (larger with biome data)
- Save files: Similar to world files
- No database required

# Development Roadmap

## PARALLEL DEVELOPMENT TRACKS

### Track A: Godot Viewer Excellence 🎨
**Goal:** Make the Godot viewer shine as a professional-grade visualization tool

### Track B: Simulation Depth 🧬
**Goal:** Enhance the headless simulation with realistic ecology and advanced world generation

---

## Phase 1: Core Simulation Foundation (COMPLETE)
**Status:** ✅ Already implemented
- World generation system with basic terrain
- Headless Bevy simulation with tick system
- Pathfinding and movement
- Basic web viewer (now deprecated)
- Entity stats and needs
- Basic AI with wandering and drinking

## Phase 2: Wildlife Ecosystem Basics (MOSTLY COMPLETE)
**Status:** ✅ 90% complete
- Six animal species implemented (Rabbit, Deer, Raccoon, Bear, Fox, Wolf)
- Behavior configuration system
- Reproduction system
- Fear and fleeing mechanics
- Predation system
- Basic Godot viewer rendering

**Remaining Tasks:**
- Fine-tune predator-prey balance
- Improve hunting AI (pack behavior for wolves)
- Add more food sources for herbivores

---

## Phase 3: Advanced World Generation 🗺️ (HIGH PRIORITY - Track B)
**Goal:** Create beautiful, ecologically-sound worlds with biomes, rivers, and natural features

### 3.1 Biome System Foundation
**Track B - Map Generator**
- Design biome type enum (TemperateForest, Woodland, Grassland, etc.)
- Implement noise-based biome placement using moisture + temperature
- Add elevation influence on biome selection
- Create biome transition zones (forest edges, ecotones)
- Add biome data layer to SerializedChunk
- Implement biome-aware terrain type selection
- Test: Generate world with visible biome diversity

### 3.2 Elevation & Height Maps
**Track B - Map Generator**
- Implement elevation noise generation (hills, valleys, mountains)
- Create height map storage in chunks
- Add elevation influence on terrain passability
- Implement slope calculation for realistic terrain
- Add elevation layer to world serialization
- Create visualization of elevation (contour-like effects)
- Test: Generate world with realistic elevation variation

### 3.3 River Generation System
**Track B - Map Generator**
- Implement source point selection (high elevation areas)
- Create flow simulation using pathfinding (downhill flow)
- Add tributary branching logic
- Implement river width variation (streams → rivers)
- Create shallow water on banks, deep water in center
- Add river influence on biomes (riparian zones)
- Ensure rivers reach oceans/lakes
- Test: Generate world with realistic river networks

### 3.4 Vegetation Placement System
**Track B - Map Generator**
- Create vegetation density maps per biome
- Implement tree placement in forests (clustered patterns)
- Add scattered trees in woodlands
- Place bushes along forest edges and clearings
- Add flowers in meadows and sunny areas
- Implement grass coverage in appropriate areas
- Create riparian vegetation along water sources
- Add rocks and boulders in rocky outcrops
- Test: Generate world with natural-looking vegetation distribution

### 3.5 Ecological Resource Distribution
**Track B - Map Generator**
- Analyze food availability per biome (herbivore needs)
- Calculate water accessibility (distance to nearest water)
- Create spawn point recommendations based on resources
- Implement resource regeneration parameters
- Add seasonal variation support (future)
- Balance food density for population support
- Test: Verify animals can survive in generated worlds

---

## Phase 4: Godot Viewer Enhancement 🎨 (HIGH PRIORITY - Track A)
**Goal:** Make the Godot viewer absolutely shine with professional features and polish

### 4.1 Advanced Biome Rendering
**Track A - Godot Viewer**
- Implement dynamic TileMap source creation for biome types
- Add smooth biome color transitions at edges
- Create distinct visual styles for each biome:
  - Forest: Deep green with tree patterns
  - Woodland: Medium green with scattered trees
  - Grassland: Bright green/yellow for meadows
  - Forest Edge: Gradient transitions
  - Riparian: Lush green near water
  - Rocky: Gray/brown tones
- Add subtle terrain texture variations
- Implement elevation shading (darker at higher elevations)
- Test: Visual appeal and clarity of different biomes

### 4.2 Enhanced Flora Rendering
**Track A - Godot Viewer**
- Upgrade tree rendering with better sprites/emoji
- Add size variation for trees (small, medium, large)
- Implement bush rendering with color variation
- Add flower patches with seasonal colors
- Create grass detail overlays for meadows
- Add wind animation for trees and grass (subtle)
- Implement day/night lighting effects on vegetation
- Use Y-sorting for proper depth perception
- Test: Visual richness and performance with dense vegetation

### 4.3 River & Water Visualization
**Track A - Godot Viewer**
- Create flowing water animation for rivers
- Add water reflection effects (simple shader)
- Differentiate shallow vs deep water visually
- Implement ripple effects near water sources
- Add mist/particle effects near rivers (optional)
- Create bank vegetation rendering
- Test: Beautiful water that draws the eye

### 4.4 Advanced Entity Visualization
**Track A - Godot Viewer**
- Improve entity sprite rendering (larger, clearer)
- Add smooth movement interpolation between tiles
- Implement action-specific animations:
  - Drinking: Entity at water source
  - Grazing: Entity in grass with eating animation
  - Hunting: Predator chasing prey with speed effect
  - Fleeing: Prey with fear indicator
  - Mating: Hearts or visual indicator
- Add health bars above entities (toggle-able)
- Implement entity trails (show recent path)
- Create zoom-level-dependent detail (far = simple, close = detailed)
- Add entity selection with detailed info panel
- Test: Engaging entity visuals that tell the story

### 4.5 Statistics & Overlays Enhancement
**Track A - Godot Viewer**
- Redesign HUD with better layout and visuals
- Add population graphs (line charts over time)
- Implement mini-map showing entity distribution
- Create biome coverage visualization (pie chart)
- Add predation event log (recent kills)
- Implement birth/death notifications (toast messages)
- Create performance metrics dashboard (FPS, tick rate, memory)
- Add simulation controls (pause, speed, fast-forward)
- Implement time-of-day indicator
- Test: HUD provides useful info without clutter

### 4.6 Camera & Controls Polish
**Track A - Godot Viewer**
- Add smooth camera transitions
- Implement "follow entity" mode
- Create bookmarked locations (save camera positions)
- Add cinematic camera paths (auto-tour mode)
- Implement screenshot mode (hide UI)
- Create replay controls (rewind, pause, frame-step)
- Add hotkeys for common actions
- Test: Professional-feeling camera control

### 4.7 Audio & Ambiance (Optional Polish)
**Track A - Godot Viewer**
- Add ambient nature sounds (birds, wind, water)
- Implement biome-specific soundscapes
- Add entity sounds (animal calls, footsteps)
- Create day/night audio transitions
- Add UI feedback sounds (clicks, notifications)
- Implement volume controls and mixing
- Test: Immersive audio that enhances experience

---

## Phase 5: Ecosystem Balancing & Depth 🧬 (Track B)
**Goal:** Create a realistic, balanced ecosystem with emergent dynamics

### 5.1 Food Chain Balancing
**Track B - Simulation**
- Analyze predator/prey population ratios
- Adjust hunger rates for realistic survival times
- Balance hunting success rates (predator skill)
- Tune escape success rates (prey agility)
- Implement starvation vs predation death tracking
- Create population oscillation detection (Lotka-Volterra)
- Add dynamic spawn rate adjustment (maintain minimum populations)
- Test: Stable populations over 100,000+ ticks

### 5.2 Advanced Hunting Behavior
**Track B - Simulation**
- Implement pack hunting for wolves (coordinated attacks)
- Add stalking behavior (approach prey slowly)
- Create chase mechanics with stamina
- Implement prey cornering logic
- Add hunting success based on terrain (ambush in forests)
- Create scavenging behavior (raccoons, bears eat corpses)
- Test: Realistic, engaging predator behavior

### 5.3 Enhanced Foraging System
**Track B - Simulation**
- Differentiate food quality (grass < bushes < special plants)
- Implement grazing depletion (grass grows back)
- Add selective feeding (prefer better food when available)
- Create food storage/caching (future: squirrels, foxes)
- Implement seasonal food availability (future)
- Test: Herbivores make intelligent food choices

### 5.4 Territorial Behavior
**Track B - Simulation**
- Implement territory marking (scent markers, invisible)
- Add territory defense (chase off intruders)
- Create pack territory for wolves
- Implement den sites (foxes, wolves, bears)
- Add migration when territory inadequate
- Test: Animals have realistic spatial organization

### 5.5 Social Behavior Enhancement
**Track B - Simulation**
- Implement wolf pack dynamics (alpha, hierarchy)
- Add herd behavior for deer (stay close, move together)
- Create parental care (mothers protect offspring)
- Implement juvenile behavior (learning period)
- Add inter-species interactions (symbiosis, competition)
- Test: Emergent social structures

### 5.6 Reproduction System Enhancement
**Track B - Simulation**
- Add seasonal breeding (spring breeding season)
- Implement mate selection (prefer healthy partners)
- Create nest/den requirement for some species
- Add litter size variation
- Implement juvenile mortality (predation on young)
- Add lifespan and aging death
- Test: Realistic population growth curves

---

## Phase 6: Environmental Dynamics 🌍 (Track B - Future)
**Goal:** Add dynamic world changes and seasonal cycles

### 6.1 Day/Night Cycle
- Implement time-of-day tracking
- Add nocturnal vs diurnal behavior (owls, bats vs deer)
- Create visibility changes (predators advantage at night)
- Implement circadian rhythms (sleep/rest cycles)
- Add lighting changes in Godot viewer

### 6.2 Seasonal Cycles
- Implement spring/summer/fall/winter progression
- Add seasonal breeding restrictions
- Create food scarcity in winter
- Implement hibernation (bears)
- Add migration patterns (future: birds)
- Create seasonal visual changes (autumn colors, snow)

### 6.3 Weather System
- Implement rain, snow, fog
- Add weather influence on behavior (shelter-seeking)
- Create weather effects on hunting success
- Implement weather visualization in Godot
- Add weather sounds

### 6.4 Dynamic Vegetation
- Implement plant growth cycles
- Add grazing impact on vegetation
- Create forest spread (trees grow)
- Implement fire and regrowth
- Add seasonal vegetation changes

---

## Phase 7: Testing & Polish 🔧 (Both Tracks)
**Goal:** Production-ready quality and developer experience

### 7.1 Testing Infrastructure (Track B)
- Create integration test framework for ecosystem
- Add population stability tests (run 100k ticks)
- Implement biome generation validation
- Create pathfinding validation tests
- Add reproduction cycle tests
- Implement predation success tests
- Create performance benchmarks

### 7.2 Developer Tools (Track A + B)
- Add debug visualization overlays in Godot
- Create entity inspector panel
- Implement real-time stat graphing
- Add simulation event log
- Create save/load state functionality
- Implement replay recording system

### 7.3 Documentation (Both Tracks)
- Write comprehensive map generator guide
- Create biome system documentation
- Document ecosystem balancing process
- Write Godot viewer customization guide
- Create troubleshooting guide
- Add ecological principles documentation

### 7.4 Performance Optimization (Both Tracks)
- Profile and optimize world generation
- Optimize chunk caching strategy
- Implement spatial partitioning for entity queries
- Optimize pathfinding with result caching
- Reduce allocations in hot paths
- Optimize Godot rendering pipeline

---

## Phase 8: Advanced Features 🚀 (Future Vision)
**Goal:** Cutting-edge features for research and engagement

### 8.1 Advanced AI & Learning
- Implement GOAP for complex decision-making
- Add reinforcement learning for hunting strategies
- Create memory system (remember locations)
- Implement learned behavior (young learn from parents)
- Add personality traits (bold vs cautious)

### 8.2 Genetic System
- Implement genetic traits (speed, strength, size)
- Add trait inheritance (offspring resemble parents)
- Create natural selection (fittest survive)
- Implement trait visualization
- Add mutation system

### 8.3 Disease & Parasites
- Implement disease transmission
- Add parasite system (ticks, worms)
- Create immunity and recovery
- Implement veterinary events (epidemics)
- Add disease visualization

### 8.4 Extended Ecosystem
- Add birds (future species: owls, hawks, crows)
- Implement insects (bees, butterflies, ants)
- Add fish (streams and ponds)
- Create amphibians (frogs in riparian zones)
- Implement reptiles (snakes, lizards)

### 8.5 Human Observer Mode (Optional)
- Add human researchers (non-intrusive)
- Implement camera traps (data collection)
- Create tagging and tracking
- Add minimal human impact (wildlife photography)
- Note: No civilization building, purely observational

---

# Logical Dependency Chain

## Critical Path (Must Be Sequential)

1. **Phase 3.1-3.2: Biome + Elevation Foundation** (Track B)
   - Must come before river generation (rivers need elevation)
   - Must come before vegetation placement (biome-specific)

2. **Phase 3.3: River Generation** (Track B)
   - Depends on elevation system
   - Must come before riparian biomes

3. **Phase 3.4: Vegetation Placement** (Track B)
   - Depends on biomes being defined
   - Needed for food availability

4. **Phase 3.5: Ecological Resource Distribution** (Track B)
   - Depends on vegetation system
   - Needed before ecosystem balancing

5. **Phase 4.1-4.3: Godot Biome/River Rendering** (Track A)
   - Can start after 3.1-3.3 complete (needs data)
   - Can run in parallel with 3.4-3.5

6. **Phase 5.1: Food Chain Balancing** (Track B)
   - Depends on vegetation and resource distribution
   - Must come before other ecosystem features

## Parallel Development Opportunities

**Can Work Simultaneously:**
- Track A (Godot) and Track B (Simulation) are largely independent
- Phase 4 (Godot enhancements) can develop while Phase 3 (world gen) progresses
- Phase 4.4-4.7 (entity visuals, UI, audio) can be done anytime after Phase 3 data exists
- Phase 5.2-5.6 (behavior enhancements) can proceed in parallel once 5.1 balancing is done

**Suggested Workflow:**
1. **Sprint 1:** Phase 3.1-3.2 (Biome + Elevation) - Track B
2. **Sprint 2:** Phase 3.3 (Rivers) - Track B
3. **Sprint 3:** Phase 4.1-4.3 (Godot Biome/River) - Track A, while Phase 3.4 (Vegetation) - Track B
4. **Sprint 4:** Phase 3.5 (Resource Distribution) - Track B, while Phase 4.4 (Entity Visuals) - Track A
5. **Sprint 5:** Phase 5.1 (Balancing) - Track B, while Phase 4.5-4.6 (UI/Camera) - Track A
6. **Sprint 6:** Phase 5.2-5.6 (Behavior) - Track B, while Phase 4.7 (Audio) - Track A

---

# Risks and Mitigations

## Technical Challenges

### Risk: Biome Generation Complexity
**Impact:** Advanced biome systems could be difficult to get right
**Mitigation:**
- Start with simple moisture+temperature model
- Use proven noise algorithms (Perlin, Simplex)
- Test with visualization early and often
- Iterate based on visual feedback
- Study real-world biome distribution patterns
- Use reference images from ecology textbooks

### Risk: River Generation Realism
**Impact:** Rivers might look unnatural or flow incorrectly
**Mitigation:**
- Use physics-inspired flow simulation (downhill)
- Study real river patterns (dendritic, meandering)
- Implement multiple river types (braided, meandering)
- Add erosion simulation for realism (future)
- Test with large worlds to verify patterns
- Get feedback from geography/geology experts

### Risk: Ecosystem Balance Difficulty
**Impact:** Predators eat all prey, or populations explode
**Mitigation:**
- Implement dynamic population monitoring
- Add population floor (minimum always present)
- Use ecological principles (10% energy transfer rule)
- Test with long simulations (100k+ ticks)
- Adjust reproduction/hunger rates iteratively
- Study Lotka-Volterra equations for guidance
- Add admin controls for population adjustment

### Risk: Godot Performance with Complex Worlds
**Impact:** Large worlds with many entities could slow down
**Mitigation:**
- Implement viewport culling (only render visible)
- Use efficient TileMap batching
- Optimize Y-sorting algorithms
- Profile regularly and optimize bottlenecks
- Add LOD system (level of detail based on zoom)
- Test with maximum expected populations (1000+ entities)

### Risk: Pathfinding Bottlenecks
**Impact:** Many entities pathfinding simultaneously could lag
**Mitigation:**
- Keep pathfinding async and budget-based
- Cache common paths (water sources)
- Implement path sharing (herd animals)
- Add path simplification for long distances
- Profile pathfinding system regularly
- Consider hierarchical pathfinding for large worlds

## Development Workflow Risks

### Risk: Two Parallel Tracks Diverging
**Impact:** Godot viewer and simulation become incompatible
**Mitigation:**
- Maintain strict API contract between systems
- Test both tracks together weekly (integration tests)
- Use versioned API responses
- Keep backward compatibility where possible
- Document API changes immediately
- Use git branches effectively (track-a, track-b, main)

### Risk: Feature Creep in Godot Viewer
**Impact:** Spending too much time on polish vs core features
**Mitigation:**
- Define MVP for each phase clearly
- Use "good enough" threshold for phase completion
- Timebox polish tasks (2-4 hours max)
- Prioritize features by user value
- Accept "nice to have" vs "must have" distinction
- Keep backlog of polish ideas for later phases

### Risk: Map Generation Taking Too Long
**Impact:** Biome system is complex and could stall progress
**Mitigation:**
- Break into small, testable increments (3.1 → 3.2 → 3.3)
- Use existing noise libraries (don't reinvent)
- Start with simple 2-3 biome types, expand later
- Generate small worlds for fast iteration
- Parallelize with Godot work once data format ready
- Accept imperfect early versions, iterate later

## Ecosystem Realism Risks

### Risk: Unrealistic Animal Behavior
**Impact:** Animals don't behave like their real counterparts
**Mitigation:**
- Research real animal behavior (documentaries, papers)
- Consult wildlife biology resources
- Test behavior in isolation (one species at a time)
- Get feedback from ecologists or nature enthusiasts
- Accept simplified models (simulation, not reality)
- Document known simplifications vs reality

### Risk: Vegetation Not Supporting Herbivores
**Impact:** Herbivores starve despite "plenty" of vegetation
**Mitigation:**
- Calculate food availability per biome
- Test herbivore-only simulations first
- Adjust vegetation density based on testing
- Implement food regeneration (grass grows back)
- Add debug overlays showing food availability
- Monitor herbivore survival rates in testing

### Risk: Predators Too Powerful or Too Weak
**Impact:** Ecosystem collapses or predators starve
**Mitigation:**
- Start with conservative predator/prey ratios (1:10)
- Test predator hunting success rates in isolation
- Adjust chase mechanics iteratively
- Implement graduated difficulty (juveniles easier to catch)
- Monitor predation event logs for balance
- Add configurable difficulty settings for testing

## Resource Constraints

### Risk: Developer Bandwidth (Single Developer)
**Impact:** Ambitious roadmap may not be achievable
**Mitigation:**
- Prioritize ruthlessly (MVP first, polish later)
- Use existing libraries and tools (don't reinvent)
- Build incrementally with working milestones
- Accept "working" over "perfect"
- Defer nice-to-have features to later phases
- Focus on one track at a time when needed
- Use AI assistants for repetitive tasks

### Risk: Testing Time Bottleneck
**Impact:** Manual testing of ecology takes hours/days
**Mitigation:**
- Automate long-running tests (100k tick runs)
- Use deterministic simulation for reproducibility
- Create test scenarios (predator-only, herbivore-only)
- Build logging and metrics into simulation
- Use Godot viewer for visual validation
- Accept some manual observation is necessary
- Run overnight tests for long-term stability

### Risk: Documentation Debt
**Impact:** Forgetting how systems work, hard for others to contribute
**Mitigation:**
- Document as you build, not after
- Keep CLAUDE.md updated with each phase
- Write inline comments for complex algorithms
- Create examples for common patterns
- Take screenshots/videos of milestones
- Update PRD when scope changes
- Use git commit messages descriptively

---

# Success Metrics

## Phase 3: World Generation Success
- [ ] Can generate worlds with 5+ distinct biomes
- [ ] Rivers flow naturally from high to low elevation
- [ ] River networks are connected and realistic
- [ ] Vegetation density matches biome types
- [ ] Animals spawn in appropriate habitats
- [ ] Water access within 50 tiles from any land location
- [ ] Biome transitions are smooth and natural-looking
- [ ] World generation completes in <30 seconds for medium worlds

## Phase 4: Godot Viewer Success
- [ ] Biomes are visually distinct and appealing
- [ ] Rivers have flowing water animation
- [ ] Vegetation renders with proper depth (Y-sorting)
- [ ] Entity animations are smooth and clear
- [ ] Camera controls feel professional and responsive
- [ ] HUD provides useful info without clutter
- [ ] Performance: 60 FPS with 500+ entities
- [ ] Users say "wow, this looks great!" when first seeing it

## Phase 5: Ecosystem Balance Success
- [ ] Populations stable over 100,000+ ticks
- [ ] No species goes completely extinct in normal conditions
- [ ] Predator/prey ratios remain in 1:5 to 1:15 range
- [ ] Herbivores successfully find food and water
- [ ] Predators successfully hunt without overpredating
- [ ] Reproduction rates maintain populations
- [ ] Births ≈ Deaths over long simulations
- [ ] Users report engaging, realistic animal behavior

## Production Ready Success (Phase 7)
- [ ] Comprehensive test coverage for critical systems
- [ ] Full documentation for both tracks
- [ ] Zero critical bugs in issue tracker
- [ ] Performance optimized for large worlds (100x100 chunks)
- [ ] Map generator guide enables creating custom biomes
- [ ] Godot viewer customization guide enables visual modding
- [ ] Clear extension guide for new animal species
- [ ] Active community creating and sharing worlds

---

# Appendix

## Technical Specifications

### Performance Targets
- **Tick Rate:** 10 TPS consistent (no dropped ticks)
- **Entity Count:** 500+ animals without performance degradation
- **World Size:** 200×200 chunks (51,200 tiles) max
- **Memory Usage:** <500MB for large worlds with full populations
- **World Generation:** <60 seconds for largest worlds
- **Pathfinding:** <10ms for 100-tile paths
- **API Response:** <50ms for chunk requests
- **Godot Rendering:** 60 FPS minimum at 1x zoom with 500 entities

### File Formats
- **World Files:** RON (Rusty Object Notation) with multi-layer support
- **Configuration:** JSON for Godot viewer settings
- **API:** JSON responses for all endpoints
- **Statistics Export:** CSV for ecological data analysis

### Code Quality Standards
- **Rust:** Pass clippy with default lints
- **Format:** cargo fmt with default settings
- **Testing:** Integration tests for critical ecological systems
- **Documentation:** Inline docs for public APIs and complex algorithms
- **Logging:** Structured logging with RUST_LOG levels (info for key events, debug for details)

## Ecological Research References

### Biome Classification
- **Temperate Deciduous Forest:** 750-1500mm precipitation, -30°C to 30°C
- **Temperate Grassland:** 300-750mm precipitation, -40°C to 38°C
- **Forest-Grassland Ecotone:** Transition zone, highest species diversity
- **Riparian Zone:** 2x-3x vegetation density, critical for wildlife

### Predator-Prey Ratios
- **Typical Ratio:** 1:10 to 1:20 (biomass)
- **Energy Transfer:** ~10% between trophic levels
- **Territory Size:**
  - Wolf pack: 80-300 km² (convert to tiles)
  - Fox: 5-12 km²
  - Deer: 0.5-2 km² (seasonal)
  - Rabbit: 0.01-0.05 km²

### Reproduction Rates
- **Rabbits:** 4-8 offspring, 3-4 litters/year, 30-day gestation
- **Deer:** 1-2 fawns, 1 litter/year, 200-day gestation
- **Wolves:** 4-6 pups, 1 litter/year, 63-day gestation
- **Foxes:** 4-5 kits, 1 litter/year, 52-day gestation
- **Bears:** 1-3 cubs, 1 litter/2 years, 200-day gestation
- **Raccoons:** 3-5 kits, 1 litter/year, 65-day gestation

### Daily Activity Patterns
- **Diurnal:** Deer, rabbits (dawn/dusk peaks - crepuscular)
- **Nocturnal:** Raccoons, foxes (mostly)
- **Cathemeral:** Bears, wolves (adapt to circumstances)

## Noise Algorithm References

### Recommended Noise Libraries
- **noise-rs:** Rust library with Perlin, Simplex, Worley noise
- **FastNoise2:** High-performance with many noise types
- **libnoise:** Classic, well-documented C++ library (Rust bindings)

### Biome Generation Formula
```
moisture = simplex_noise(x, y, seed1) * 0.7 + perlin_noise(x, y, seed2) * 0.3
temperature = simplex_noise(x, y, seed3) * 0.6 + latitude_gradient * 0.4
elevation = multi_octave_perlin(x, y, seed4, octaves=6)

biome = select_biome(moisture, temperature, elevation)
```

## Godot Rendering Optimization Tips

1. **TileMap Batching:** Use single TileMap per layer, not per biome
2. **Y-Sorting:** Use YSort node for entities/resources only, not terrain
3. **Viewport Culling:** Only render chunks in camera view
4. **LOD System:** Reduce entity detail when zoomed out
5. **Shader Performance:** Use simple shaders, avoid complex effects
6. **Texture Atlasing:** Pack multiple sprites into single atlas
7. **Particle Budget:** Limit particle systems (water, wind) to visible area

## Known Limitations

### Current Architecture
- Single-threaded simulation (intentional for determinism)
- HTTP API only (no WebSocket support)
- Local only (no multiplayer)
- No runtime world editing (generate new worlds instead)
- Godot viewer is observer-only (no input to simulation)

### Ecological Simplifications
- No seasonal cycles (yet - Phase 6)
- No disease or parasites (Phase 8)
- No genetic variation (Phase 8)
- Simplified energy transfer (no detailed caloric modeling)
- No detailed plant lifecycle (instant maturity)
- Simplified predator behavior (no complex pack tactics yet)

### Performance Limits
- Max recommended: 1000 entities total
- Max recommended world size: 200×200 chunks
- Pathfinding limited to 5000 steps max
- River generation limited to 100 sources per world

## Future Expansion Ideas

### Modding Support
- Lua scripting for custom behaviors
- JSON-based entity definitions
- Custom biome definitions via config
- Behavior tree editor UI
- Godot plugin system for custom visuals

### Data Export & Analysis
- CSV export of population data
- Heatmap generation (predation, births, deaths)
- Statistical analysis tools
- Comparison between different worlds
- Machine learning training data export

### Educational Features
- Tutorial mode explaining ecology
- Interactive overlay explaining predator-prey dynamics
- "Nature documentary" mode with narration
- Educational labels and info panels
- Classroom-ready presentations

### Advanced Visualization
- 3D rendering option (Bevy renderer mode)
- VR support for immersive observation
- Time-lapse video generation
- Custom camera paths for cinematics
- Drone-like free camera mode

---

**This PRD represents the vision for a scientifically-inspired, beautifully visualized wildlife ecosystem simulator. The focus on parallel tracks (Godot + Simulation) enables rapid progress on both visualization and ecological depth, creating a compelling and educational experience.**
</PRD>
